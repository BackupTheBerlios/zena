empty:
  src: ""
  res: ""

hello:
  src: "<z:hello/>"
  res: "hello world!"
  
double_hello:
  src: "<z:hello/> <z:hello/>"
  res: "hello world! hello world!"

ignore_html:
  src: "<div class='test'><p>some <i>funny</i> text</p></div>"
  res: "<div class='test'><p>some <i>funny</i> text</p></div>"

hello_skip_content:
  src: "<z:hello>I want to live forever</z:hello>"
  res: "hello world!"

tag_not_closed:
  src: "this is <z:test super='life' is = \"fine\""
  res: "this is <z:test super='life' is = \"fine\""

hello_not_closed:
  src: "I say <z:hello>blah blah"
  res: "I say hello world!"

test:
  src: "this <z:test>is a test</z:test> <z:hello/>"
  res: "this [test]is a test[/test] hello world!"
  
very_messy:
  src: "this <z: blah> </z:truc> whak"
  res: "this <z: blah> <span class='zafu_error'>&lt;/z:truc&gt;</span> whak"

bad_closing_tag:
  src: "this <z:test>looks </z:truc> ok"
  res: "this [test]looks <span class='zafu_error'>&lt;/z:truc&gt;</span>[/test] ok"

zafu_tag:
  src: "I say <p zafu='hello'>blah blah</p>"
  res: "I say <p>hello world!</p>"

zafu_tag_count:
  src: "I say <p zafu='hello'>blah <p>super</p> blah</p> is good"
  res: "I say <p>hello world!</p> is good"

zafu_tag_closed:
  src: "I say <p zafu='hello'/> is good"
  res: "I say <p>hello world!</p> is good"

zafu_tag_block:
  src:  "I say <div zafu='test'>this <div>test</div> is ok</div> right?"
  res: "I say <div>[test]this <div>test</div> is ok[/test]</div> right?"

zafu_tag_at_end:
  src:  "I say <div zafu='test'>this <div>test</div> is ok</div>"
  res: "I say <div>[test]this <div>test</div> is ok[/test]</div>"

zafu_tag_with_ztags:
  src: "I say <div zafu='test'>this <z:hello/></div>"
  res: "I say <div>[test]this [hello/][/test]</div>"

zafu_keep_params:
  src: "I love <div zafu='test' class='truc' id='machin' depth='3'>my wife</div>"
  res: "I love <div class='truc' id='machin'>[test {= :depth=>'3'}]my wife[/test]</div>"

zafu_and_ztags:
  src: "Hey <z:test>this is <p zafu='hello'>ok</p></z:test>"
  res: "Hey [test]this is <p>[hello]ok[/hello]</p>[/test]"

zafu_same_tag:
  src: "Hey <p zafu='test'> is <p zafu='hello'>hello <p>cool</p></p></p>"
  res: "Hey <p>[test] is <p>[hello]hello <p>cool</p>[/hello]</p>[/test]</p>"  
expand_with:
  src: "this <z:test>looks </z:test> ok"
  res: "this [test]looks [/test] ok"
  
params:
  src: "some <z:test good='choice' nice='work'>things</z:test> are fine"
  res: "some [test {= :good=>'choice', :nice=>'work'}]things[/test] are fine"

default_menu:
  src: "the <z:test>menu</z:test> is nice"
  res: "the [test]menu[/test] is nice"
  
include_menu:
  src: "include_menu: <z:include template='/default/menu'/>"
  res: "include_menu: the [test]menu[/test] is nice"

include_context:
  src: "include_context: <z:include template='menu'/>"
  res: "include_context: include_menu: the [test]menu[/test] is nice"

infinite_loop:
  src: "<z:include template='/infinite/loop'/>"
  res: "<span class='zafu_error'>[include error: /infinite/loop --&gt; /infinite/loop ]</span>"
  
infinite_foo:
  src: "<z:include template='bar'/>"
  res: "<span class='zafu_error'>[include error: /infinite/foo --&gt; /infinite/bar --&gt; /infinite/foo ]</span>"
  
infinite_bar:
  src: "<z:include template='foo'/>"
  res: "<span class='zafu_error'>[include error: /infinite/bar --&gt; /infinite/foo --&gt; /infinite/bar ]</span>"
  
other_context:
  src: "from other: <z:include template='menu'/> and <z:include template='/include/menu'/>"
  res: "from other: the [test]menu[/test] is nice and include_menu: the [test]menu[/test] is nice"

set_context:
  src: "res:<z:test/> <z:set_context truc='machin'>src:<z:test/></z:set_context> res:<z:test/>"
  res: "res:[test/] src:[test {> :truc=>'machin'}/] res:[test/]"
  
nested_set_context:
  src: "<z:set_context var1='out' var2='foo'>1:<z:test/><z:set_context var1='in'>2:<z:test/></z:set_context>3:<z:test/></z:set_context>"
  res: "1:[test {> :var1=>'out', :var2=>'foo'}/]2:[test {> :var1=>'in', :var2=>'foo'}/]3:[test {> :var1=>'out', :var2=>'foo'}/]"

complex_example:
  src: |
    Some people say <z:hello/>
    Some say <z:include template='menu'/>
      <ul class='list' zafu='set_context' life='ok'>
        <li>truc</li>
        <li>machin</li>
        <li zafu='test'>sunny day</li>
      </ul>
    <z:set_context var='complex'><z:include template='/default/menu'/></z:set_context>
  res: |
    Some people say hello world!
    Some say the [test]menu[/test] is nice
      <ul class='list'>
        <li>truc</li>
        <li>machin</li>
        <li>[test {> :life=>'ok'}]sunny day[/test]</li>
      </ul>
    the [test {> :var=>'complex'}]menu[/test] is nice

unknown:
  src:  "this looks bad: <z:system truc='lala'/>"
  res: "this looks bad: <span class='zafu_unknown'>&lt;z:system truc='lala'/&gt;</span>"
  
check_params:
  src: "bad <z:missing/> params"
  res: "bad [missing parameter(s) missing:good, night] params"

check_params_partial:
  src: "bad <z:missing good='ok'/> params"
  res: "bad [missing parameter(s) missing:night] params"

check_params_ok:
  src: "bad <z:missing good='ok' night='hey'/> params"
  res: "bad nothing missing params"

doctype:
  src: |
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <title zafu='test'>node title</title>
  res: |
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <title>[test]node title[/test]</title>
  
no_tag:
  src: "<z:set_context no_test='true'>this is a <z:test>test</z:test>dog</z:set_context>"
  res: "this is a dog"
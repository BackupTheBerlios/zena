= Welcome to Zena

Zena is a CMS. (c) teti.ch 2007

-------------------------------------------
== Todo
!! DO NOT PUT 'PATH TO FILES' IN ZENA.rb
!! TRY TO KEEP ONLY ONE CONFIGURATION FILE, LOADED
!! BY environment/...
!! BUG WITH DISCUSSION REMOVE: not working
deletion of node
USER : CONTACT_ID ??
popup 'drive' should show vertical scroll bar...
traduire le texte de base pour l'aide en anglais
APPLICATION_TEST : should use same testing as application_helper...
PATH_LINKS: correct and try to find some way to cache the base in project ?
is app/views/node/_tags used ?
multiversion: version finder: why use lang = ? Testing needed : example : I have a new page, with a redaction in 'en'. I navigate in 'fr' I am in no group: the version never shows up and BANG !
open/close note: the :as option should be worked out in zazen, when using limit to get the text.
Ideas for cached menu: 
  a. expire less often
  b. build with 1 cache for each sub-menu
  c. expire by hand
  d. keep only one menu with public rights for all users
  e. sub-menu : only children with same read_group ==> cache on this group.
There is a bug when validating a long redaction. The end is stripped off.
=== Optimization & Cache
* sweep public page cache :
  * page for all lang
  * project for all lang
  * old links & new links
* on destroy : remove all (including document files)
* why not use 'action' caching instead ?
=== Test
* users, groups see all TODO: test...
=== Misc
* replace session[:user][...] by visitor[...] (cache in User if needed..)
* replace rmagick with a more simple library or use something like system "convert #{escape(temp)} -resize 48x48! #{escape(target)}"
* show_title could guess when to display a title and when not to
-------------------------------------------
== Enhancements
=== Zazen
* code to show table of contents (with depth option)
* how do footnotes work with textile ?
* user_menu with favorites
=== Forms
* could we use 'form_for' for preferences and simple things ?
=== Views
* split zen.css, admin.css, comments.css into
  * actions.css  <== small buttons and stuff (should never be changed)
  * admin.css    <== administration boxes
  * zen.css      <== layout style
  * comments.css <== comment style
* view archive... & search tool
* contact search/list page
=== Security
* How do we avoid someone removing the wiki as a whole ? +can_destroy+ will have to look for publish access in the parent.
* Implement salt login with client side JS : http://pajhome.org.uk/crypt/md5/
=== Error messages
* translate flash 'notice' and 'error', with clever '%s'. Translate error messages (message and field name)
=== Preferences, ZENA_ENV
Store user defaults, prefs and site config, etc in the database. STI starting with 'settings' (id, key(string), value(yaml), type) :
* settings <--- UserPreferences
* settings <--- ProjectSettings
* settings <--- SiteConfiguration
=== Translations
* load new languages from the web interface

Custom info that could be stored
* custom menu = std menu + own menu (= user[:custom_menu_collector])
* default comment_group

=== Other
* is +text+ a good format for *paths* ? What should be the size of a string ?
-------------------------------------------
== general info
* when creating the database: "create database zena DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;"


-------------------------------------------
= Conception
Zena is divided into modules. These modules are :
== web (base engine)
Content management system. The web module can contain different nodes 
* *Contacts* people with addresses
* *Logs* weblog
* *Events* time related events shown in a calendar or as a 'news' list
* *Pages* just normal html content
* *Documents* files, photos, videos, anything up/downloadable
* *Tags* special pages collecting information from other pages
* *Projects* basic place into which the other modules can plug in.
=== calendar component
Provides views and filters for #Events.
=== menu component
Monitor readings, book collection
Provides navigation through #StructuredNodes
=== book component
== book engine
Monitor readings, book collection. It makes it very easy to add book references to documents. Or
just a list of the books the person is reading.
== login engine
* will first implement this in web...
== task engine
Task management (something like trac). This module will help solve questions such as
* who does what
* what has already been done
* take care of new problems, tasks, bugs
* make a like with versioning systems (Subversion)
* milestones
* project progression, planning
* actions done can have a duration thus permitting time invoices
== accounting engine
Accounting user oriented.
* All seizure of monetary flows are done through budget envelopes
* It is trivial to enter things like 'John gave 100.- to Cecilia in advance for the costumes of our next play'
* Monitoring of budget and actual expenses is easy and intuitive
* There is a 1 clic production of legal documents.

== Security management
See Zena::Acts::Secure
link://../img/zena_security.png
=== Salt Login
link://../img/zena_salt_login.png
== Schema
link://../img/zena.png
== Fixtures
link://../img/zena_fixtures.png
== Node life cycle
link://../img/zena_create_event.png
link://../img/zena_add_document.png
link://../img/zena_view_document.png
== Layout propositions
link://../img/zena_layout.png
link://../img/zena_layout2.png
link://../img/zena_layout3.png
== Gems to install
gem install RedCloth
== Plugins
(used http://rails-engines.org/wiki/pages/DateboxEngine for date_box)